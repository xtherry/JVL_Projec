'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _index = require('./approve/index.js');

var _index2 = _interopRequireDefault(_index);

require('isomorphic-fetch');

var _ethos = require('@beisen/ethos');

var _approveIfream = require('./approve/approve-ifream');

var _approveIfream2 = _interopRequireDefault(_approveIfream);

var _loading = require('./loading/loading.js');

var _loading2 = _interopRequireDefault(_loading);

require('../src/style/all.scss');

var _mockdata = require('./approve/mockdata.js');

var _mockdata2 = _interopRequireDefault(_mockdata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import "style/all.scss";

//mockdata


var defaultTranslation = {
	nodeTitle: '节点名称',
	terminationNodeText: '已终止',
	assignesTitle: '审批人',
	approveDlgTitle: '工作流详情',
	approveDlgBtnText: '关闭'
};
var getLngFormatToParam = function getLngFormatToParam(trans, stag) {
	var ret = [];
	if (trans) {
		for (var t in trans) {
			var p = stag ? stag + '.' + t : t;
			ret.push(p);
		}
	}
	return ret;
};

var getLngFormatToObject = function getLngFormatToObject(trans) {
	var ret = {};
	if (trans) {
		for (var t in trans) {
			var x = t.split('.');
			var _x = x[x.length - 1];
			ret[_x] = trans[t];
		}
	}
	return ret;
};

var App = function (_Component) {
	_inherits(App, _Component);

	function App(props) {
		_classCallCheck(this, App);

		var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

		_this.state = {
			"popShow": false,
			translation: Object.assign(defaultTranslation, window._BSI18NTools && getLngFormatToObject(window._BSI18NTools.getTransList(getLngFormatToParam(defaultTranslation, 'workflow'))))
		};

		_this.PopData = {
			'title': _this.state.translation.approveDlgTitle //头部名称
			, "hasHeader": true //是否显示头部
			, "hasFooter": true //是否显示底部，含有确定取消按钮
			, "dataType": "component" //string 字符串 component 组件
			//,"data":{"address": null}     //需要传入引入组件的数据
			, "hidden": false //隐藏弹窗
			, "subBtnShow": true //默认为true
			, "subBtnText": _this.state.translation.approveDlgBtnText //默认为确定
			, "cloBtnShow": false //默认为true
			, "cloBtnText": "隐藏该按钮" //默认为取消
			, "showMask": true,
			'customStyle': navigator.userAgent.indexOf("Edge") > -1 ? { position: "relative" } : {},
			"contentResizeListener": true // 开启监听弹层内容高度变化
		};
		return _this;
	}

	_createClass(App, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.filterContainer = document.createElement('div');
			document.body.appendChild(this.filterContainer);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.closePop();
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var self = this;
			if (self.props.processInstanceId) {
				self.getDataByMyselef().then(function (data) {
					self.setState({
						popShow: false,
						data: data
					});
				});
			} else if (self.props.approveData) {
				self.setState({
					popShow: false,
					data: self.props.approveData
				});
			}
			//-------------------------
			// --------走mockData,
			// ***发版时将测试代码屏蔽***
			//-------------------------
			/*if(self.props.processInstanceId){
   	this.setState({
   		popShow : false
   		,data :data
   	})
   }*/
		}
	}, {
		key: 'showPop',
		value: function showPop() {
			//here to do more...
			window.iTalentSDK.register({ //注册获取左侧宽度和上面高度
				listenEvent: 'getLeftMenuWidth',
				cb: function cb(data) {}
			});

			window.iTalentSDK.changeLeftMenuShade({ 'needSendWidth': true });
			if (!this.address) {
				return;
			}

			if (this.props.showPopUp) {
				this.props.showPopUP({
					sourceData: {
						'address': this.address
					},
					componentName: 'NodeIframe',
					events: {
						'closePopUp': 'closePopUp'
					}
				});
			} else {
				this.setState({
					"popShow": true
				});
			}
		}
	}, {
		key: 'closePop',
		value: function closePop() {
			if (this.state.popShow) {
				window.iTalentSDK.changeLeftMenuShade(); //关闭导航栏遮罩
			}
			this.setState({
				"popShow": false
			});
			_reactDom2.default.unmountComponentAtNode(this.filterContainer);
		}

		//接口加个参数(身份信息)

	}, {
		key: 'getQueryObject',
		value: function getQueryObject() {
			var url = location.hash;
			// firefox获取location.hash会触发自动decode的bug，此处做判断兼容
			if (navigator.userAgent.toLowerCase().indexOf("firefox") > 0) {
				url = decodeURIComponent(url);
			}
			var hash = url.replace(/^(.+)\?(.+)$/ig, "$2").split("&");
			var obj = {};
			hash.map(function (query) {
				var couple = query.split("=");
				obj[couple[0]] = couple[1];
			});
			return obj;
		}
	}, {
		key: 'getDataByMyselef',
		value: function getDataByMyselef() {
			var processInstanceId = this.props.processInstanceId;

			// deferred.resolve(data);
			var data = {};
			var defaultHeaders = {
				'Accept': 'application/json, application/xml, text/play, text/html, *.*',
				'Content-Type': 'application/json; charset=utf-8'
			};
			var url = '/api/v1/WF/FlowChart/GetFowChartSnapshot' + "?processInstanceId=" + processInstanceId;

			var urlParam = this.getQueryObject();
			if (urlParam._pt && urlParam._ptid) {
				url = url + '&_pt=' + urlParam._pt + '&_ptid=' + urlParam._ptid;
			};
			if (urlParam.shadow_context) {
				url = url + '&shadow_context=' + urlParam.shadow_context;
			};

			data.headers = defaultHeaders;

			data.credentials = 'include'; //传递cookie信息

			return fetch(url, data).then(function (response) {
				return response.json();
			});
		}
	}, {
		key: 'getUrlFormData',
		value: function getUrlFormData() {
			var url = "";
			if (!this.state.data || !this.state.data.activitys) {
				return url;
			}
			var data = this.state.data.activitys;
			var length = data.length;
			var allComplate = true;

			for (var i = 0; i < length; i++) {
				var temp = data[i];
				if (temp.status == 4 || temp.status == "readmore") {
					url = temp.url;
				}
				if (temp.status != 1 && temp.status != "done") {
					allComplate = false;
				}
			}

			if (allComplate) {
				this.state.data.allComplate = true;
			}
			return url;
		}
	}, {
		key: 'getTarAddress',
		value: function getTarAddress(address) {
			var url = address.split("#");

			var urlParam = this.getQueryObject();
			var linkSymbol = url[0].indexOf('?') >= 0 ? '&' : '?';
			if (urlParam._pt && urlParam._ptid) {
				url[0] = url[0] + linkSymbol + '_pt=' + urlParam._pt + '&_ptid=' + urlParam._ptid;
			};
			if (urlParam.shadow_context) {
				url[0] = url[0] + linkSymbol + 'shadow_context=' + urlParam.shadow_context;
			};
			return url[0] + "#" + url[1];
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.address = this.getTarAddress(this.getUrlFormData());

			var _pData = Object.assign(this.PopData, { "data": { "address": this.address } });

			var commonPop = this.state.popShow && this.address ? _react2.default.createElement(
				'div',
				{ className: 'approvePop' },
				_react2.default.createElement(_ethos.CommonPop, _extends({}, _pData, {
					PopComponent: _approveIfream2.default,
					submitPop: this.closePop.bind(this),
					closePop: this.closePop.bind(this) }))
			) : _react2.default.createElement('div', null);
			_reactDom2.default.unstable_renderSubtreeIntoContainer(this, commonPop, this.filterContainer);
			// console.info(ReactDOM);
		}
	}, {
		key: 'render',
		value: function render() {
			// const address = "http://workflow-cloud.italent-inc.cn/workflow/TaskInfo#flowcheck?type=0&id=35c71eb1-7398-442c-9609-d48708f59844";
			var address = this.getUrlFormData();
			this.address = address;

			/*var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
   var isEdge = userAgent.indexOf("Edge") > -1; //判断是否IE的Edge浏览器
   	const PopData = {
       'title':"工作流详情"        //头部名称
       ,"hasHeader":true   //是否显示头部
       ,"hasFooter":true //是否显示底部，含有确定取消按钮
       ,"dataType":"component"  //string 字符串 component 组件
       ,"data":{"address":address}     //需要传入引入组件的数据
       ,"hidden":false     //隐藏弹窗
   	,"subBtnShow":true //默认为true
   	,"subBtnText":"关闭" //默认为确定
   	,"cloBtnShow":false //默认为true
   	,"cloBtnText":"隐藏该按钮" //默认为取消
       ,"showMask":true
       ,'customStyle': isEdge ? {position:"relative"} : {}
   }*/
			// let commonPop = this.state.popShow&&address ?<CommonPop {...PopData} PopComponent={NodeIframe} submitPop={::this.closePop} closePop={::this.closePop}/>:"";

			if (this.state.data) {
				return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_index2.default, { showPop: this.showPop.bind(this), approveData: this.state.data, translation: this.state.translation, address: this.address })
				);
			} else if (this.props.processInstanceId && !this.state.data) {
				return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_loading2.default, null)
				);
			} else {
				return _react2.default.createElement('div', null);
			}
		}
	}]);

	return App;
}(_react.Component);

module.exports = App;
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('../../src/loading/loading.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * author:lianglongfei
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * desc:loading component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Loading = function (_Component) {
	_inherits(Loading, _Component);

	function Loading(props) {
		_classCallCheck(this, Loading);

		return _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));
	}

	_createClass(Loading, [{
		key: 'render',
		value: function render() {
			var _style = {
				background: 'rgba(128, 128, 128, 0.2)',
				position: 'absolute',
				width: '100%',
				height: '100%',
				top: 0,
				left: 0
			};
			var _props = this.props,
			    _props$hidden = _props.hidden,
			    hidden = _props$hidden === undefined ? false : _props$hidden,
			    _props$style = _props.style,
			    style = _props$style === undefined ? {} : _props$style;

			var tempDis = hidden ? { display: 'none' } : { display: 'block' };
			var __style = Object.assign(tempDis, _style, style);
			return _react2.default.createElement(
				'div',
				{ className: 'spinner', style: __style },
				_react2.default.createElement(
					'div',
					{ className: 'spinner_con' },
					_react2.default.createElement('div', { className: 'bounce1' }),
					_react2.default.createElement('div', { className: 'bounce2' }),
					_react2.default.createElement('div', { className: 'bounce3' })
				)
			);
		}
	}]);

	return Loading;
}(_react.Component);

exports.default = Loading;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ethos = require('@beisen/ethos');

var _approveIfream = require('./approve-ifream');

var _approveIfream2 = _interopRequireDefault(_approveIfream);

var _approveTips = require('./approve-tips.js');

var _approveTips2 = _interopRequireDefault(_approveTips);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NodeItem = function (_Component) {
	_inherits(NodeItem, _Component);

	function NodeItem(props) {
		_classCallCheck(this, NodeItem);

		var _this = _possibleConstructorReturn(this, (NodeItem.__proto__ || Object.getPrototypeOf(NodeItem)).call(this, props));

		_this._message = function (event) {
			var _data = void 0;
			try {
				_data = JSON.parse(event.data || '{}');
				// sdk 当 window.top 值为自身和非自身时会走两套逻辑，导致发出的 message 不一致，这里做兼容
				if (_data.publishEvent == 'preloadDone' || _data._iTalentType == 'preloadEventLoaded') {
					_this.preloadDone = true;
				}
			} catch (e) {
				// nothing
			}
		};

		_this._addEvent = function (event_name, callback) {
			_this._removeEvent(event_name, callback);
			if (window.addEventListener) {
				window.addEventListener('on' + event_name, callback, false);
				window.addEventListener(event_name, callback, false);
			} else {
				if (window.attachEvent) {
					window.attachEvent('on' + event_name, callback);
					window.attachEvent(event_name, callback);
					document.body.attachEvent('on' + event_name, callback);
					document.body.attachEvent(event_name, callback);
				}
			}
		};

		_this._removeEvent = function (event_name, callback) {
			if (window.removeEventListener) {
				window.removeEventListener('on' + event_name, callback, false);
				window.removeEventListener(event_name, callback, false);
			} else {
				if (window.detachEvent) {
					window.detachEvent('on' + event_name, callback);
					window.detachEvent(event_name, callback);
					document.body.detachEvent('on' + event_name, callback);
					document.body.detachEvent(event_name, callback);
				}
			}
		};

		_this.state = {
			"popShow": false
		};
		_this.readMoreHandleDebounce = (0, _lodash2.default)(_this.readMoreHandle.bind(_this), 3000, {
			leading: true, trailing: false
		});
		return _this;
	}

	//点击“查看更多”事件


	_createClass(NodeItem, [{
		key: 'readMoreHandle',
		value: function readMoreHandle() {
			if (this.props.data.wfVersion) {
				var self = this;
				if (window.BSGlobal['__dialogPreLoad']) {
					var intervalTime = 0;
					var timeTemp = setInterval(function () {
						if (self.preloadDone) {
							window.iTalentSDK && window.iTalentSDK.showPopup(self.props.address, '100%', '100%', {}, undefined, undefined, false);
							clearInterval(timeTemp);
						} else if (intervalTime == 2000) {
							window.iTalentSDK && window.iTalentSDK.showPopup(self.props.address, '100%', '100%', {}, undefined, undefined, false);
							clearInterval(timeTemp);
						}
						intervalTime += 200;
					}, 200);
				} else {
					window.iTalentSDK && window.iTalentSDK.showPopup(this.props.address, '100%', '100%', {}, undefined, undefined, false);
				}
			} else {
				this.props.showPop();
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._removeEvent('message', this._message);
			this._addEvent('message', this._message);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			// 这里不能省略，因为每次进入详情页就会添加一次全局监听
			this._removeEvent('message', this._message);
			this.preloadDone = false;
		}
	}, {
		key: 'createNodeInfo',


		//创建审批节点信息DOM
		value: function createNodeInfo() {
			if (!this.props.node.assignes) {
				this.props.node.assignes = [];
			}
			var approvalName = "";
			var assignesvalue = this.props.node.assignes.map(function (item, index) {
				if (index > 4) {
					return false;
				}

				if (item.name) {
					if (index == 0) {
						approvalName = approvalName + item.name;
					} else {
						approvalName = approvalName + "," + item.name;
					}
				}
			});
			if (this.props.node.status == 'termination') {
				approvalName = '';
			}
			assignesvalue = approvalName != "" ? _react2.default.createElement(
				'span',
				{ className: 'assignee-value', ref: 'assigneeValue' },
				approvalName
			) : null;

			//'完成'节点中内容有两层，一层是节点信息，另一层是显示'对号'
			// let finishExtraNode = (this.props.node.status == 'done')?(<div className = 'node-info'></div>):null;

			var assigneeName = _react2.default.createElement(
				'span',
				{ className: 'assignee-name', ref: 'assigneeName' },
				this.props.node.name
			);
			var noValueName = _react2.default.createElement(
				'span',
				{ className: 'assignee-name-noValue', ref: 'assigneeName' },
				this.props.node.name
			);

			if (this.props.node.status == 'readmore') {
				assigneeName = _react2.default.createElement(
					'span',
					{ className: 'assignee-name' },
					this.props.node.name
				);
				noValueName = _react2.default.createElement(
					'span',
					{ className: 'assignee-name-noValue' },
					this.props.node.name
				);
			} else if (this.props.node.status == 'termination') {
				assigneeName = _react2.default.createElement(
					'span',
					{ className: 'assignee-name' },
					this.props.translation.terminationNodeText
				);
				noValueName = _react2.default.createElement(
					'span',
					{ className: 'assignee-name-noValue', ref: 'assigneeName' },
					this.props.translation.terminationNodeText
				);
			}
			if (this.props.allComplate) {
				var assigneeClass = this.props.position == 'end' ? 'assignee-info-c' : 'assignee-info';
				var assigneeNameClass = this.props.node.assignes.length > 0 ? this.props.position == 'end' ? 'assignee-name-c' : 'assignee-name' : 'assignee-name-noValue';
				return _react2.default.createElement(
					'div',
					{ className: 'item-content', ref: 'itemContent', onClick: this.props.node.status == 'readmore' ? this.readMoreHandleDebounce.bind(this) : null },
					_react2.default.createElement(
						'div',
						{ className: assigneeClass },
						_react2.default.createElement(
							'span',
							{ className: assigneeNameClass, ref: 'assigneeName' },
							this.props.node.name
						),
						this.props.node.assignes.length > 0 ? _react2.default.createElement(
							'span',
							{ className: 'assignee-maohao' },
							(this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue ? ":" : ""
						) : "",
						assignesvalue
					)
				);
			}
			return _react2.default.createElement(
				'div',
				{ className: 'item-content', ref: 'itemContent', onClick: this.props.node.status == 'readmore' ? this.readMoreHandleDebounce.bind(this) : null },
				this.props.node.status == 'readmore' ? _react2.default.createElement(
					_ethos.ToolTip,
					{ title: this.props.node.name },
					_react2.default.createElement(
						'div',
						{ className: 'assignee-info' },
						this.props.node.assignes.length > 0 ? assigneeName : noValueName,
						this.props.node.assignes.length > 0 ? _react2.default.createElement(
							'span',
							{ className: 'assignee-maohao' },
							(this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue ? ":" : ""
						) : "",
						assignesvalue
					)
				) : _react2.default.createElement(
					'div',
					{ className: 'assignee-info' },
					this.props.node.assignes.length > 0 ? assigneeName : noValueName,
					this.props.node.assignes.length > 0 ? _react2.default.createElement(
						'span',
						{ className: 'assignee-maohao' },
						(this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue ? ":" : ""
					) : "",
					assignesvalue
				)
			);
		}

		//创建审批节点背景DOM

	}, {
		key: 'createBgLayer',
		value: function createBgLayer() {
			return _react2.default.createElement(
				'div',
				{ className: 'bg-layer' },
				_react2.default.createElement('div', { className: 'bg-layer-line' })
			);
		}

		//创建审批节点鼠标滑过提示DOM

	}, {
		key: 'createNodeTips',
		value: function createNodeTips() {
			var self = this;
			var assigneeName = '';
			// debugger;
			this.props.node.assignes.map(function (item, index) {
				assigneeName += index === self.props.node.assignes.length - 1 ? item.name : item.name + ";";
			});

			return _react2.default.createElement(
				'div',
				{ className: 'node-tips' },
				_react2.default.createElement(
					'div',
					{ className: 'tips-box' },
					_react2.default.createElement(
						'span',
						null,
						this.props.translation.nodeTitle + "：" + this.props.node.name
					),
					_react2.default.createElement(
						'span',
						null,
						this.props.translation.assignesTitle + "：" + assigneeName
					)
				)
			);
		}
	}, {
		key: 'hoverFun',
		value: function hoverFun(e) {
			var self = this;
			if (this.props.node.status == "readmore") {
				return;
			}
			var a = self.refs.myInput;
			var sizeObj = a.getBoundingClientRect();
			var left = sizeObj.left + sizeObj.width / 2;

			var c = document.body.getBoundingClientRect();
			var bodyHiehgt = window.innerHeight - sizeObj.top + 8;

			this.setState({
				'popShow': true,
				'left': left,
				'bottom': bodyHiehgt,
				'target': e.currentTarget,
				'realLeft': sizeObj.left
			});
		}
	}, {
		key: 'leveFun',
		value: function leveFun() {
			this.setState({
				'popShow': false,
				'left': null,
				'bottom': null
			});
		}
		//渲染

	}, {
		key: 'render',
		value: function render() {

			var className = 'status-item ' + 'status-position-' + this.props.position + " status-" + this.props.node.status;
			var nodeInfo = this.createNodeInfo();
			var nodeTips = this.createNodeTips();
			var bgLayer = this.createBgLayer();

			var newTip = "";
			var showtip = true;
			var index = this.props.index;
			if (this.props.wrapWidth && this.props.isOverFlow) {
				var length = this.props.length;
				var allwidth = this.props.wrapWidth - 30 - this.props.translateX;

				var sigalwidth = 124;

				var showNumber = Math.floor(allwidth / sigalwidth);

				if (index + 1 > showNumber) {
					showtip = false;
				}
			}

			if (this.state.popShow && showtip) {
				newTip = _react2.default.createElement(_approveTips2.default, { target: this.state.target, bottom: this.state.bottom, left: this.state.left, realLeft: this.state.realLeft, node: this.props.node, translation: this.props.translation });
			}
			this.oldTranslateX = this.props.translateX;
			return _react2.default.createElement(
				'div',
				{ ref: 'myInput', onMouseOver: this.hoverFun.bind(this), onMouseLeave: this.leveFun.bind(this), className: className },
				nodeInfo,
				bgLayer,
				newTip
			);
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			var reg = /10\.0/;
			var str = navigator.userAgent;
			if (window.ActiveXObject && reg.test(str)) {
				var nameNodes = this.refs.assigneeName;
				var valueNodes = this.refs.assigneeValue;
				var itemContent = this.refs.itemContent;
				if (nameNodes && valueNodes && itemContent) {
					var nameNodesWidth = nameNodes.offsetWidth;
					var valueNodesWidth = valueNodes.offsetWidth;
					var itemContentWidth = itemContent.offsetWidth - 34;

					if (nameNodesWidth < itemContentWidth - 24) {
						nameNodes.style.maxWidth = nameNodesWidth + "px";
						valueNodes.style.maxWidth = itemContentWidth - nameNodesWidth + 'px';
					} else {
						valueNodes.style.maxWidth = '24px';
						nameNodes.style.maxWidth = itemContentWidth - 24 + 'px';
					}
				}
			} else {
				// var nameNodes = this.refs.assigneeName;
				// var valueNodes = this.refs.assigneeValue;
				// if (nameNodes && valueNodes) {
				// 	var nameNodesWidth = nameNodes.offsetWidth + 5;
				// 	nameNodes.style.maxWidth = "calc(100% - 24px)";
				// 	valueNodes.style.maxWidth = "calc(100% - " + nameNodesWidth + "px)";
				// }
				var nameNodes = this.refs.assigneeName;
				var valueNodes = this.refs.assigneeValue;
				var itemContent = this.refs.itemContent;
				if (nameNodes && valueNodes && itemContent) {
					var nameNodesWidth = nameNodes.offsetWidth;
					var valueNodesWidth = valueNodes.offsetWidth;
					var itemContentWidth = itemContent.offsetWidth - 34;

					if (nameNodesWidth < itemContentWidth - 24) {
						nameNodes.style.maxWidth = nameNodesWidth + "px";
						valueNodes.style.maxWidth = itemContentWidth - nameNodesWidth + 'px';
					} else {
						valueNodes.style.maxWidth = '24px';
						nameNodes.style.maxWidth = itemContentWidth - 24 + 'px';
					}
				}
			}
		}
	}]);

	return NodeItem;
}(_react.Component);

module.exports = NodeItem;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _approveList = require('./approve-list.js');

var _approveList2 = _interopRequireDefault(_approveList);

var _approveButton = require('./approve-button.js');

var _approveButton2 = _interopRequireDefault(_approveButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import data from './mockdata.js' 1111
var Approve = function (_Component) {
	_inherits(Approve, _Component);

	function Approve(props) {
		_classCallCheck(this, Approve);

		var _this = _possibleConstructorReturn(this, (Approve.__proto__ || Object.getPrototypeOf(Approve)).call(this, props));

		_this.state = {
			isOverFlow: false,
			translateX: 0,
			maxTranslateX: 0,
			showPic: false,
			wrapWidth: null
		};
		return _this;
	}

	_createClass(Approve, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var self = this;
			window.addEventListener('resize', self.contentCreate.bind(self));
			this.contentCreate();
		}
	}, {
		key: 'contentCreate',
		value: function contentCreate() {
			var wrapWidth = this.refs.root ? this.refs.root.offsetWidth : window.offsetWidth;
			var approveListLength = this.props.approveData.activitys.length || 0;
			var listMinWidth = approveListLength * 120;
			var showPicAllWidth = approveListLength * 140;
			this.setState({ maxTranslateX: wrapWidth - listMinWidth });

			wrapWidth - listMinWidth < 100 ? this.setState({
				isOverFlow: true
				// isOverFlow : false
				, translateX: wrapWidth - approveListLength * 124,
				maxTranslateX: 0,
				wrapWidth: wrapWidth,
				approveData: this.props.approveData

			}) : this.setState({
				isOverFlow: false,
				translateX: 0,
				wrapWidth: wrapWidth,
				maxTranslateX: 0,
				approveData: this.props.approveData
			});

			wrapWidth - showPicAllWidth > 0 ? this.setState({ showPic: true }) : this.setState({ showPic: false });
		}
		//是否显示分页按钮

	}, {
		key: 'showBtn',
		value: function showBtn() {
			if (this.state.isOverFlow) return _react2.default.createElement(_approveButton2.default, { data: this.props.approveData, goLeftHandle: this.listGoRight.bind(this), goRightHandle: this.listGoLeft.bind(this) });
			return false;
		}
	}, {
		key: 'listGoLeft',
		value: function listGoLeft() {
			var self = this;
			this.setState({ translateX: this.state.translateX - 124 });
			// if((this.state.maxTranslateX - 120) > this.state.translateX){
			// 	setTimeout(function(){
			// 		self.setState({translateX:self.state.translateX + 120});
			// 	},300)
			// }

			var wrapWidth = this.refs.root.offsetWidth || window.offsetWidth;
			var approveListLength = this.props.approveData.activitys.length || 0;
			if (this.state.translateX < wrapWidth - approveListLength * 124) {
				setTimeout(function () {
					self.setState({ translateX: self.state.translateX + 124 });
				}, 300);
			}
		}
	}, {
		key: 'listGoRight',
		value: function listGoRight() {
			var self = this;
			this.setState({ translateX: this.state.translateX + 120 });
			if (this.state.translateX + 120 >= 0) {
				setTimeout(function () {
					self.setState({ translateX: 0 });
				}, 300);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var button = this.showBtn();
			var className = 'approve-wrap ' + (this.state.isOverFlow ? "wrap-extend" : '');

			return _react2.default.createElement(
				'div',
				{ className: 'root', ref: 'root', id: 'nodeTipsRoot' },
				_react2.default.createElement(
					'div',
					{ className: className },
					_react2.default.createElement(_approveList2.default, {
						wrapWidth: this.state.wrapWidth,
						isOverFlow: this.state.isOverFlow,
						translateX: this.state.translateX,
						data: this.props.approveData,
						address: this.props.address,
						showPop: this.props.showPop,
						positionX: this.state.translateX,
						translation: this.props.translation,
						showPic: this.state.showPic
					}),
					button
				)
			);
		}
	}]);

	return Approve;
}(_react.Component);

module.exports = Approve;
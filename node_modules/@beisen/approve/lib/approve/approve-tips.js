'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ApprovePop = function (_Component) {
	_inherits(ApprovePop, _Component);

	function ApprovePop(props) {
		_classCallCheck(this, ApprovePop);

		return _possibleConstructorReturn(this, (ApprovePop.__proto__ || Object.getPrototypeOf(ApprovePop)).call(this, props));
	}

	_createClass(ApprovePop, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.popShow();
		}
	}, {
		key: 'removePopTree',
		value: function removePopTree() {
			(0, _reactDom.unmountComponentAtNode)(document.getElementById('popApprove_bodyComponent'));
			document.body.removeChild(document.getElementById('popApprove_bodyComponent'));
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.removePopTree();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {
			this.removePopTree();
			this.popShow();
		}
	}, {
		key: 'popShow',
		value: function popShow() {
			var oDIv = document.createElement('div');
			oDIv.id = 'popApprove_bodyComponent';
			document.body.appendChild(oDIv);
			window._popTree = window.document;
			(0, _reactDom.unstable_renderSubtreeIntoContainer)(this, _react2.default.createElement(ApproveTip, this.props), document.getElementById('popApprove_bodyComponent'));
		}
	}, {
		key: 'render',
		value: function render() {

			return _react2.default.createElement('div', null);
		}
	}]);

	return ApprovePop;
}(_react.Component);

var ApproveTip = function (_Component2) {
	_inherits(ApproveTip, _Component2);

	function ApproveTip(props) {
		_classCallCheck(this, ApproveTip);

		return _possibleConstructorReturn(this, (ApproveTip.__proto__ || Object.getPrototypeOf(ApproveTip)).call(this, props));
	}

	_createClass(ApproveTip, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var TipNode = this.refs.nodeTips;
			var iconNode = this.refs.nodeIcon;
			var rootNode = document.getElementById('nodeTipsRoot');

			var nodeTipsSize = TipNode.getBoundingClientRect();

			TipNode.style.left = this.props.left - nodeTipsSize.width / 2 + 'px';

			var nodeLeft = this.props.left - nodeTipsSize.width / 2;

			if (TipNode.offsetLeft + nodeTipsSize.width > window.innerWidth) {
				var widthNode = this.props.target.getBoundingClientRect().width / 2 - (rootNode.getBoundingClientRect().right - this.props.realLeft - 80) / 2;
				TipNode.style.left = window.innerWidth - nodeTipsSize.width - 10 + 'px';
				var nextNodeLeft = window.innerWidth - nodeTipsSize.width;
				iconNode.style.left = nodeTipsSize.width / 2 + (nodeLeft - nextNodeLeft) - widthNode + 10 + 'px';
			}

			if (TipNode.offsetLeft < 0) {
				var changeLeft = 0 - TipNode.getBoundingClientRect().left;
				var widthNode = this.props.target.getBoundingClientRect().width / 2 - (this.props.target.getBoundingClientRect().right - rootNode.getBoundingClientRect().left) / 2;
				TipNode.style.left = 0 + 'px';
				iconNode.style.left = nodeTipsSize.width / 2 - changeLeft + widthNode + 'px';
			}

			if (TipNode.getBoundingClientRect().height > rootNode.getBoundingClientRect().top) {
				TipNode.children[0].className = 'tips-box-bottom';
				TipNode.style.bottom = this.props.bottom - TipNode.getBoundingClientRect().height - 52 + "px";
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var self = this;
			var assigneeName = '';
			var assigneeNameHtml = '';
			var assignesTitle = "<div className='approverNameListBorder1' style='max-width:340px'><span className='approverNameList' style='float:left;width:60px'>" + this.props.translation.assignesTitle + "：</span>";
			var checkP = "";
			var length = this.props.node.assignes.length;
			this.props.node.assignes.map(function (item, index) {

				if (index == 0 && length != 1) {
					assigneeNameHtml += '<label>' + item.name + "，" + "</label>";
				} else if (index == 0 && length == 1) {
					assigneeNameHtml += '<label>' + item.name + "</label>";
				} else if (index <= length - 2) {
					assigneeNameHtml += '<label>' + item.name + "，" + "</label>";
				} else {
					assigneeNameHtml += '<label>' + item.name + "</label>";
				}
			});
			assigneeNameHtml += "</div>";

			assignesTitle += assigneeNameHtml;
			if (this.props.node.assignes && this.props.node.assignes.length > 0) {
				checkP = _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: assignesTitle } });
			}
			var checkN = _react2.default.createElement(
				'span',
				null,
				this.props.translation.nodeTitle + '：' + this.props.node.name
			);

			var checkIcon = _react2.default.createElement('span', { className: 'tips-box-icon', ref: 'nodeIcon' });

			var terminationNode = this.props.node.status == 'termination' ? _react2.default.createElement(
				'span',
				{ className: 'tip-termination-item' },
				this.props.translation.terminationNodeText
			) : null;

			var clazzName = 'tips-box';

			var sty = {
				left: this.props.left,
				bottom: this.props.bottom
			};

			if (length > 2) {
				delete sty.bottom;
				var heardCardDom = document.getElementsByClassName('head_card')[0];
				if (heardCardDom) {
					// sty.top = heardCardDom.className.match("head_card-common") ? (heardCardDom.clientHeight + 55) : (heardCardDom.clientHeight + 40);
					sty.top = this.props.target.getBoundingClientRect().top + 40;
				} else {
					sty.top = 104;
				}

				clazzName = 'tips-box-bottom';
			}

			return _react2.default.createElement(
				'div',
				{ className: 'node-tips-approval', ref: 'nodeTips', style: sty },
				_react2.default.createElement(
					'div',
					{ className: clazzName },
					checkN,
					checkIcon,
					checkP,
					terminationNode
				)
			);
		}
	}]);

	return ApproveTip;
}(_react.Component);

exports.default = ApprovePop;
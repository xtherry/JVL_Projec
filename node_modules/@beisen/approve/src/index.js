import React, {Component, PropTypes} from 'react'
import ReactDOM, {render} from 'react-dom';
import Approve from './approve/index.js';
import 'isomorphic-fetch';
import { CommonPop } from '@beisen/ethos';
import NodeIframe from './approve/approve-ifream';
import Loading from './loading/loading.js'
// import "style/all.scss";

import "../src/style/all.scss";
//mockdata
import data from './approve/mockdata.js'

const defaultTranslation = {
    nodeTitle: '节点名称',
    terminationNodeText: '已终止',
    assignesTitle: '审批人',
	approveDlgTitle: '工作流详情',
    approveDlgBtnText: '关闭'
}
let getLngFormatToParam = function(trans, stag) {
    let ret = []
    if (trans){
        for (let t in trans){
            let p = stag ? stag +'.'+ t : t
            ret.push(p)
        }
    }
    return ret
}

let getLngFormatToObject = function (trans) {
    let ret = {}
    if (trans){
        for (let t in trans){
            let x = t.split('.')
            let _x = x[x.length -1]
            ret[_x] = trans[t]
        }
    }
    return ret
}

class App extends Component {
	constructor(props) {
		super(props);

		this.state = {
			"popShow":false,
            translation: Object.assign(
            		defaultTranslation,
                	window._BSI18NTools && getLngFormatToObject(window._BSI18NTools.getTransList(getLngFormatToParam(defaultTranslation, 'workflow')))
			)
		}

        this.PopData = {
            'title': this.state.translation.approveDlgTitle  //头部名称
            ,"hasHeader":true   //是否显示头部
            ,"hasFooter":true //是否显示底部，含有确定取消按钮
            ,"dataType":"component"  //string 字符串 component 组件
            //,"data":{"address": null}     //需要传入引入组件的数据
            ,"hidden":false     //隐藏弹窗
            ,"subBtnShow":true //默认为true
            ,"subBtnText": this.state.translation.approveDlgBtnText //默认为确定
            ,"cloBtnShow":false //默认为true
            ,"cloBtnText":"隐藏该按钮" //默认为取消
            ,"showMask":true
			,'customStyle': navigator.userAgent.indexOf("Edge") > -1 ? {position:"relative"} : {}
			,"contentResizeListener": true  // 开启监听弹层内容高度变化
        }
	}

    componentWillMount() {
    	this.filterContainer = document.createElement('div');
      	document.body.appendChild(this.filterContainer); 
    }
    componentWillUnmount(){
    	this.closePop();
    }
	componentDidMount(){
		var self = this;
		if(self.props.processInstanceId){
			self.getDataByMyselef().then(function(data){
				self.setState({
					popShow : false
					,data :data
				})
			})
		}else if(self.props.approveData){
			self.setState({
				popShow : false
				,data :self.props.approveData
			})
		}
		//-------------------------
		// --------走mockData,
		// ***发版时将测试代码屏蔽***
		//-------------------------
		/*if(self.props.processInstanceId){
			this.setState({
				popShow : false
				,data :data
			})
		}*/
	}
	showPop(){
		//here to do more...
		window.iTalentSDK.register({   //注册获取左侧宽度和上面高度
		  listenEvent: 'getLeftMenuWidth',
		  cb: function(data){}
		})

		window.iTalentSDK.changeLeftMenuShade({'needSendWidth': true}) 
		if(!this.address){
			return;
		}

		if(this.props.showPopUp){
			this.props.showPopUP({
				sourceData : {
		        	'address' : this.address
		      },
		      componentName : 'NodeIframe',
		      events:{
		      	'closePopUp':'closePopUp'
		      }
		    });

		}else{
			this.setState({
				"popShow": true
			});
		}
		
	}

	closePop(){
		if(this.state.popShow){
			window.iTalentSDK.changeLeftMenuShade();//关闭导航栏遮罩
		}
		this.setState({
			"popShow": false
		})
    	ReactDOM.unmountComponentAtNode(this.filterContainer);
	}

	//接口加个参数(身份信息)
	getQueryObject(){
	  var url = location.hash;
	  // firefox获取location.hash会触发自动decode的bug，此处做判断兼容
	  if (navigator.userAgent.toLowerCase().indexOf("firefox") > 0) {        
	    url = decodeURIComponent(url);
	  }
	  var hash = url.replace(/^(.+)\?(.+)$/ig,"$2").split("&");
	  var obj = {};
	  hash.map(query=>{
	      var couple = query.split("=");
	      obj[couple[0]] = couple[1];
	  });
	  return obj;
	}
	getDataByMyselef (){
		var processInstanceId = this.props.processInstanceId
			
		// deferred.resolve(data);
		var data = {};
		var defaultHeaders = {
	        'Accept': 'application/json, application/xml, text/play, text/html, *.*',
	        'Content-Type': 'application/json; charset=utf-8'
    	}
    	var url = '/api/v1/WF/FlowChart/GetFowChartSnapshot'+"?processInstanceId="+processInstanceId;

	    let urlParam = this.getQueryObject();
	    if (urlParam._pt && urlParam._ptid) {
	        url = url + '&_pt=' + urlParam._pt + '&_ptid=' + urlParam._ptid;
	    };
	    if (urlParam.shadow_context) {
	        url = url + '&shadow_context=' + urlParam.shadow_context;
	    };

    	data.headers = defaultHeaders

    	data.credentials = 'include'; //传递cookie信息

    	return fetch(url, data).then(function(response){
    		return response.json();
    	});

	}
	getUrlFormData (){
		var url = "";
		if(!this.state.data||!this.state.data.activitys){
			return url;
		}
		const data = this.state.data.activitys;
		const length = data.length;
		var allComplate = true;
		
		for(var i = 0; i < length; i++){
			const temp = data[i];
			if(temp.status == 4||temp.status == "readmore"){
				url = temp.url;
			}
			if(temp.status != 1 && temp.status != "done"){
				allComplate = false;
			}
		}
		
		if(allComplate){
			this.state.data.allComplate = true;
		}
		return url;
	}

    getTarAddress (address) {
        let url = address.split("#");

        let urlParam = this.getQueryObject();
        let linkSymbol = url[0].indexOf('?') >= 0 ? '&' : '?';
        if (urlParam._pt && urlParam._ptid) {
            url[0] = url[0] + linkSymbol + '_pt=' + urlParam._pt + '&_ptid=' + urlParam._ptid;
        };
        if (urlParam.shadow_context) {
            url[0] = url[0] + linkSymbol + 'shadow_context=' + urlParam.shadow_context;
        };
        return url[0]+"#"+url[1];
	}

    componentDidUpdate() {
		this.address = this.getTarAddress(this.getUrlFormData());

		let _pData = Object.assign(this.PopData, {"data":{"address":this.address}})

		let commonPop = this.state.popShow && this.address ? <div className="approvePop">
															<CommonPop {..._pData}
																PopComponent={NodeIframe}
																submitPop={::this.closePop}
																closePop={::this.closePop} />
													   </div> : <div />;
		ReactDOM.unstable_renderSubtreeIntoContainer(this,commonPop,this.filterContainer);
		// console.info(ReactDOM);
    }
	render () {
		// const address = "http://workflow-cloud.italent-inc.cn/workflow/TaskInfo#flowcheck?type=0&id=35c71eb1-7398-442c-9609-d48708f59844";
		const address = this.getUrlFormData();
		this.address = address;

		/*var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
		var isEdge = userAgent.indexOf("Edge") > -1; //判断是否IE的Edge浏览器

		const PopData = {
		    'title':"工作流详情"        //头部名称
		    ,"hasHeader":true   //是否显示头部
		    ,"hasFooter":true //是否显示底部，含有确定取消按钮
		    ,"dataType":"component"  //string 字符串 component 组件
		    ,"data":{"address":address}     //需要传入引入组件的数据
		    ,"hidden":false     //隐藏弹窗
			,"subBtnShow":true //默认为true
			,"subBtnText":"关闭" //默认为确定
			,"cloBtnShow":false //默认为true
			,"cloBtnText":"隐藏该按钮" //默认为取消
		    ,"showMask":true
		    ,'customStyle': isEdge ? {position:"relative"} : {}
		}*/
		// let commonPop = this.state.popShow&&address ?<CommonPop {...PopData} PopComponent={NodeIframe} submitPop={::this.closePop} closePop={::this.closePop}/>:"";
		
		if(this.state.data){
			return (
				<div>
					<Approve showPop={::this.showPop} approveData={this.state.data} translation={this.state.translation} address = {this.address}/>
				</div>	
			)
		}else if(this.props.processInstanceId && !this.state.data){
			return (
				<div>
				<Loading />
				</div>	
				)
		}else{
			return (
					<div></div>
					)
		}

	}
}

module.exports = App;
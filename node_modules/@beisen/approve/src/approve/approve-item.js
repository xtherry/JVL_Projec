import React, {Component, PropTypes} from 'react'
import ReactDOM, {render} from 'react-dom';
import { ToolTip } from '@beisen/ethos';
import NodeIframe from './approve-ifream';
import NewTips from './approve-tips.js'
import debounce from 'lodash.debounce';
class NodeItem extends Component {
	constructor(props){
		super(props);
		this.state ={
			 "popShow":false
		}
		this.readMoreHandleDebounce = debounce(this.readMoreHandle.bind(this), 3000, {
            leading: true, trailing: false
        });
	}

	//点击“查看更多”事件
	readMoreHandle(){
		if(this.props.data.wfVersion){
			let self = this;
			if(window.BSGlobal['__dialogPreLoad']) {
				let intervalTime = 0;
				var timeTemp = setInterval(()=> {
					if(self.preloadDone){
						window.iTalentSDK && window.iTalentSDK.showPopup(self.props.address, '100%', '100%', {} ,undefined,undefined,false);
						clearInterval(timeTemp)
					}else if(intervalTime == 2000){
						window.iTalentSDK && window.iTalentSDK.showPopup(self.props.address, '100%', '100%', {} ,undefined,undefined,false);
						clearInterval(timeTemp)
					}
					intervalTime += 200;
				}, 200)
			} else {
				window.iTalentSDK && window.iTalentSDK.showPopup(this.props.address, '100%', '100%', {} ,undefined,undefined,false);
			}
		}else{
			this.props.showPop();
		}
	}
	componentDidMount() {
		this._removeEvent('message', this._message);
		this._addEvent('message', this._message);
	}

	componentWillUnmount() {
		// 这里不能省略，因为每次进入详情页就会添加一次全局监听
		this._removeEvent('message', this._message);
		this.preloadDone = false;
	}
	_message = event => {
		let _data;
		try {
			_data = JSON.parse(event.data || '{}');
			// sdk 当 window.top 值为自身和非自身时会走两套逻辑，导致发出的 message 不一致，这里做兼容
			if (_data.publishEvent == 'preloadDone' || _data._iTalentType == 'preloadEventLoaded') {
				this.preloadDone = true;
			}
		} catch (e) {
		// nothing
		}
	}
	_addEvent = (event_name, callback) => {
		this._removeEvent(event_name, callback);
		if (window.addEventListener) {
			window.addEventListener('on' + event_name, callback, false);
			window.addEventListener(event_name, callback, false);
		} else {
			if (window.attachEvent) {
				window.attachEvent('on' + event_name, callback);
				window.attachEvent(event_name, callback);
				document.body.attachEvent('on' + event_name, callback);
				document.body.attachEvent(event_name, callback);
			}
		}
	}
	_removeEvent = (event_name, callback) => {
		if (window.removeEventListener) {
			window.removeEventListener('on' + event_name, callback, false);
			window.removeEventListener(event_name, callback, false);
		} else {
			if (window.detachEvent) {
				window.detachEvent('on' + event_name, callback);
				window.detachEvent(event_name, callback);
				document.body.detachEvent('on' + event_name, callback);
				document.body.detachEvent(event_name, callback);
			}
		}
	}

	//创建审批节点信息DOM
	createNodeInfo(){
		if(!this.props.node.assignes){
			this.props.node.assignes = [];
		}
		let approvalName = "";
		let assignesvalue = this.props.node.assignes.map(function(item,index){
			if (index > 4) {return false;}

			if (item.name) {
				if (index == 0) {
					approvalName = approvalName + item.name;
				}else{
					approvalName = approvalName + "," + item.name;
				}
			}
		});
		if (this.props.node.status == 'termination') {
			approvalName = '';
		}
		assignesvalue =	(approvalName != "") ? (<span className = "assignee-value" ref="assigneeValue">{approvalName}</span>) : null;

		//'完成'节点中内容有两层，一层是节点信息，另一层是显示'对号'
		// let finishExtraNode = (this.props.node.status == 'done')?(<div className = 'node-info'></div>):null;

		let assigneeName = (<span className = 'assignee-name' ref="assigneeName" >{this.props.node.name}</span>);
		let noValueName = (<span className = 'assignee-name-noValue' ref="assigneeName" >{this.props.node.name}</span>);

		if (this.props.node.status == 'readmore') {
			assigneeName = (<span className = 'assignee-name' >{this.props.node.name}</span>);
			noValueName = (<span className = 'assignee-name-noValue' >{this.props.node.name}</span>);
		}else if (this.props.node.status == 'termination') {
			assigneeName = (<span className = 'assignee-name'>{this.props.translation.terminationNodeText}</span>);
			noValueName = (<span className = 'assignee-name-noValue' ref="assigneeName" >{this.props.translation.terminationNodeText}</span>);
		}
		if(this.props.allComplate){
			let assigneeClass = this.props.position == 'end' ? 'assignee-info-c' : 'assignee-info';
			let assigneeNameClass = this.props.node.assignes.length > 0 ? (this.props.position == 'end' ? 'assignee-name-c' : 'assignee-name') : 'assignee-name-noValue';
			return (
					<div className='item-content' ref="itemContent" onClick={this.props.node.status == 'readmore' ? this.readMoreHandleDebounce.bind(this) : null}>
						<div className = {assigneeClass}>
							<span className={assigneeNameClass} ref="assigneeName">
								{this.props.node.name}
							</span>
							{this.props.node.assignes.length > 0 ? (<span className="assignee-maohao">{((this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue)? ":" : ""}</span>) : ""}
							{assignesvalue}
						</div>
					</div>
				)
		}
		return(
			<div className='item-content' ref="itemContent" onClick={this.props.node.status == 'readmore' ? this.readMoreHandleDebounce.bind(this) : null}>
				{this.props.node.status == 'readmore' ? 
				<ToolTip title={this.props.node.name} ><div className = 'assignee-info'>
					{this.props.node.assignes.length > 0 ? assigneeName : noValueName}
					{this.props.node.assignes.length > 0 ? (<span className="assignee-maohao">{((this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue)? ":" : ""}</span>) : ""}
					{assignesvalue}
				</div></ToolTip> : 
				<div className = 'assignee-info'>
					{this.props.node.assignes.length > 0 ? assigneeName : noValueName}
					{this.props.node.assignes.length > 0 ? (<span className="assignee-maohao">{((this.props.node.status == 'done' || this.props.node.status == 'doing') && assignesvalue)? ":" : ""}</span>) : ""}
					{assignesvalue}
				</div>}
			</div>
		)
	}

//创建审批节点背景DOM
	createBgLayer(){
		return(
			<div className="bg-layer">
				<div className="bg-layer-line"></div>
			</div>
		)
	}

//创建审批节点鼠标滑过提示DOM
	createNodeTips(){
		let self = this;
		let assigneeName = '';
		// debugger;
		this.props.node.assignes.map(function(item,index){
			assigneeName += (index === self.props.node.assignes.length - 1)?(item.name):( item.name + ";" );
		})

		return(
			<div className='node-tips'>
				<div className="tips-box">
					<span>{this.props.translation.nodeTitle+"："+this.props.node.name}</span>
					<span>{this.props.translation.assignesTitle+"："+assigneeName}</span>
				</div>
			</div>
		)	
	}
	hoverFun(e){
		var self = this;
		if (this.props.node.status == "readmore") {
			return;
		}
		var a = self.refs.myInput;
		var sizeObj = a.getBoundingClientRect();
		var left = sizeObj.left + (sizeObj.width / 2);
		
		var c = document.body.getBoundingClientRect();
		var bodyHiehgt = window.innerHeight - sizeObj.top + 8;

		this.setState({
			'popShow': true,
			'left': left,
			'bottom': bodyHiehgt,
			'target': e.currentTarget,
			'realLeft': sizeObj.left
		});


	}
	leveFun(){
		this.setState({
			'popShow':false
			,'left':null
			,'bottom':null
		})
	}
//渲染
	render () {
		
		let className =  'status-item ' + 'status-position-'+this.props.position + " status-"+this.props.node.status;
		let nodeInfo = this.createNodeInfo();
		let nodeTips = this.createNodeTips();
		let bgLayer = this.createBgLayer();
		
		let newTip = "";
		let showtip = true;
		let index = this.props.index;
		if(this.props.wrapWidth&&this.props.isOverFlow){
			let length = this.props.length;
			let allwidth = this.props.wrapWidth - 30 - (this.props.translateX);

			let sigalwidth = 124;

			let showNumber = Math.floor(allwidth/sigalwidth);
			
			if(index+1 > showNumber){
				showtip = false;
			}
		}
		
		
		if(this.state.popShow && showtip){ 
			newTip = <NewTips target={this.state.target} bottom={this.state.bottom} left={this.state.left} realLeft={this.state.realLeft} node={this.props.node} translation={this.props.translation} />
		}
		this.oldTranslateX = this.props.translateX;
		return (
				<div ref="myInput" onMouseOver={::this.hoverFun} onMouseLeave={::this.leveFun} className={className}>
					{nodeInfo}
					{bgLayer}
					{newTip}
				</div>
			)
	}


	componentDidUpdate(){
		var reg = /10\.0/;
		var str = navigator.userAgent;
		if (window.ActiveXObject && reg.test(str)) {
			var nameNodes = this.refs.assigneeName;
			var valueNodes = this.refs.assigneeValue;
			var itemContent = this.refs.itemContent;
			if (nameNodes && valueNodes && itemContent) {
				var nameNodesWidth = nameNodes.offsetWidth;
				var valueNodesWidth = valueNodes.offsetWidth;
				var itemContentWidth = itemContent.offsetWidth - 34;

				if (nameNodesWidth < itemContentWidth - 24) {
					nameNodes.style.maxWidth = nameNodesWidth + "px";
					valueNodes.style.maxWidth = itemContentWidth - nameNodesWidth + 'px';
				} else {
					valueNodes.style.maxWidth = '24px';
					nameNodes.style.maxWidth = itemContentWidth - 24 + 'px';
				}
			}
		} else {
			// var nameNodes = this.refs.assigneeName;
			// var valueNodes = this.refs.assigneeValue;
			// if (nameNodes && valueNodes) {
			// 	var nameNodesWidth = nameNodes.offsetWidth + 5;
			// 	nameNodes.style.maxWidth = "calc(100% - 24px)";
			// 	valueNodes.style.maxWidth = "calc(100% - " + nameNodesWidth + "px)";
			// }
			var nameNodes = this.refs.assigneeName;
			var valueNodes = this.refs.assigneeValue;
			var itemContent = this.refs.itemContent;
			if (nameNodes && valueNodes && itemContent) {
				var nameNodesWidth = nameNodes.offsetWidth;
				var valueNodesWidth = valueNodes.offsetWidth;
				var itemContentWidth = itemContent.offsetWidth - 34;

				if (nameNodesWidth < itemContentWidth - 24) {
					nameNodes.style.maxWidth = nameNodesWidth + "px";
					valueNodes.style.maxWidth = itemContentWidth - nameNodesWidth + 'px';
				} else {
					valueNodes.style.maxWidth = '24px';
					nameNodes.style.maxWidth = itemContentWidth - 24 + 'px';
				}
			}
		}
	}
}

module.exports = NodeItem;


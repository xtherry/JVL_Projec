import React, {Component, PropTypes} from 'react'
import {render,unstable_renderSubtreeIntoContainer,unmountComponentAtNode} from 'react-dom';

class ApprovePop extends Component {
	constructor(props){
		super(props);
	}
	componentDidMount(){
		this.popShow();
	}
	removePopTree(){
	  	unmountComponentAtNode(document.getElementById('popApprove_bodyComponent'));
	    document.body.removeChild(document.getElementById('popApprove_bodyComponent'));
	}
	componentWillUnmount(){
		this.removePopTree();
	}
  	componentWillReceiveProps(){
    	this.removePopTree();
    	this.popShow();
  	}
	popShow(){
	  	const oDIv = document.createElement('div');
	    oDIv.id = 'popApprove_bodyComponent';
	    document.body.appendChild(oDIv);
	    window._popTree = window.document; 
	    unstable_renderSubtreeIntoContainer(this,<ApproveTip {...this.props}/>, document.getElementById('popApprove_bodyComponent'));
	  }
	render(){
		
		return(
			<div>
				
			</div>
		)	
	}
}
class ApproveTip extends Component {
	constructor(props){
		super(props);
	}
	componentDidMount(){
		var TipNode = this.refs.nodeTips;
		var iconNode = this.refs.nodeIcon;
		var rootNode = document.getElementById('nodeTipsRoot');

		var nodeTipsSize = TipNode.getBoundingClientRect();

		TipNode.style.left = this.props.left - nodeTipsSize.width / 2 + 'px';

		var nodeLeft = this.props.left - nodeTipsSize.width / 2;

		if (TipNode.offsetLeft + nodeTipsSize.width > window.innerWidth) {
			var widthNode = this.props.target.getBoundingClientRect().width / 2 - (rootNode.getBoundingClientRect().right - this.props.realLeft - 80) / 2;
			TipNode.style.left = window.innerWidth - nodeTipsSize.width - 10 + 'px';
			var nextNodeLeft = window.innerWidth - nodeTipsSize.width;
			iconNode.style.left = nodeTipsSize.width / 2 + (nodeLeft - nextNodeLeft) - widthNode + 10 + 'px';
		}

		if (TipNode.offsetLeft < 0) {
			var changeLeft = 0 - TipNode.getBoundingClientRect().left;
			var widthNode = this.props.target.getBoundingClientRect().width / 2 - (this.props.target.getBoundingClientRect().right - rootNode.getBoundingClientRect().left) / 2;
			TipNode.style.left = 0 + 'px';
			iconNode.style.left = nodeTipsSize.width / 2 - changeLeft + widthNode + 'px';
		}

		if (TipNode.getBoundingClientRect().height > rootNode.getBoundingClientRect().top) {
			TipNode.children[0].className = 'tips-box-bottom';
			TipNode.style.bottom = this.props.bottom - TipNode.getBoundingClientRect().height - 52 + "px";
		}
	}
	render(){
		let self = this;
		let assigneeName = '';
		let assigneeNameHtml = '';
		let assignesTitle = "<div className='approverNameListBorder1' style='max-width:340px'><span className='approverNameList' style='float:left;width:60px'>"+ this.props.translation.assignesTitle+"：</span>";
		let checkP = "";
		let length = this.props.node.assignes.length;
		this.props.node.assignes.map(function(item,index){
			
			if(index==0&&length!=1){
				assigneeNameHtml += '<label>'+(item.name)+"，"+"</label>";
			}else if(index==0&&length==1){
				assigneeNameHtml += '<label>'+(item.name)+"</label>";
			}else if(index<=length-2){
				assigneeNameHtml += '<label>'+(item.name)+"，"+"</label>";
			} else {
				assigneeNameHtml += '<label>'+(item.name)+"</label>";
			}

		});
		assigneeNameHtml+="</div>"
		
		assignesTitle += assigneeNameHtml;
		if(this.props.node.assignes&&this.props.node.assignes.length>0){
			checkP = (<div dangerouslySetInnerHTML= {{__html: assignesTitle}}></div>)
		}
		var checkN = <span>{this.props.translation.nodeTitle+'：'+this.props.node.name}</span>

		var checkIcon = <span className='tips-box-icon' ref='nodeIcon'></span>

		var terminationNode = this.props.node.status == 'termination' ? <span className='tip-termination-item'>{this.props.translation.terminationNodeText}</span> : null;
		
		var clazzName = 'tips-box';

		let sty = {
			left:this.props.left
			,bottom:this.props.bottom
		}
		
		if(length> 2){
			delete sty.bottom;
			let heardCardDom = document.getElementsByClassName('head_card')[0];
			if(heardCardDom) {
				// sty.top = heardCardDom.className.match("head_card-common") ? (heardCardDom.clientHeight + 55) : (heardCardDom.clientHeight + 40);
				sty.top = this.props.target.getBoundingClientRect().top + 40;
			} else {
				sty.top = 104;
			}
			
			clazzName = 'tips-box-bottom'
		}


		return(
			<div className='node-tips-approval' ref="nodeTips" style={sty}>
				<div className={clazzName}>
					{checkN}
					{checkIcon}
					{checkP}
					{terminationNode}
				</div>
			</div>
		)
		
	}
}
export default ApprovePop;